name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        # IMPROVEMENT: Aligned with your local Python 3.9 version
        python-version: '3.9'

    - name: Cache pip dependencies
      # IMPROVEMENT: Updated to the latest version of the cache action
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx safety bandit

    - name: Create test environment file
      run: |
        cat > .env << EOF
        # IMPROVEMENT: Using the correct asyncpg driver in the URL
        DATABASE_URL=postgresql+asyncpg://testuser:testpassword@localhost:5432/testdb
        SECRET_KEY=test_secret_key_for_ci
        AERODATASPHERE_API_KEY=test_key
        HOTEL_API_KEY=test_key
        EOF

    - name: Run tests
      run: |
        pytest tests/ -v --tb=short
      env:
        DATABASE_URL: postgresql+asyncpg://testuser:testpassword@localhost:5432/testdb
        SECRET_KEY: test_secret_key_for_ci

    - name: Run security check
      run: |
        safety check --file requirements.txt --ignore 70716 --ignore 70715
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Upload security report
      # CRITICAL FIX: Updated from deprecated v3 to v4
      uses: actions/upload-artifact@v4
      if: always() # Ensure report is uploaded even if bandit finds issues
      with:
        name: security-report
        path: bandit-report.json

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deployment step would go here"
        echo "This could trigger deployment to your cloud provider"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"